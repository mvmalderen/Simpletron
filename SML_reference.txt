SML Language Reference
======================

Q: What is a Simpletron word?
A: Everything in the decimal range [(-9999) - (+9999)].

Q: How do I combine an opcode with an operand to form a word?
A: word = opcode * 100 + operand.
 :
 : Example: instruction WRITE has opcode 11. operand = 15.
 :            ==> Simpletron word = 11 * 100 + 15 = 1100 + 15 = 1115.
 :            ==> Meaning: Write the word from memory location 15 to the screen.

Q: Can I make assumptions about the contents of a Simpletron's memory?
A: Absolutely NOT! The only way to guarantee the contents of a memory slot is
 : by explicitly writing a value to it. This can be done either by the loader or
 : by your program itself.

Q: How do I properly terminate my program?
A: There's only one way to tell the CPU that your program is terminating, and that is
 : by using a HALT instruction. Undefined behaviour occurs when you omit the use of HALT.

instruction  |  opcode  |  operand |  description

READ         |    10    |          |  Read a word from the keyboard into a specific location in memory.

WRITE        |    11    |          |  Write a word from a specific location in memory to the screen.

LOAD         |    20    |          |  Load a word from a specific location in memory into the accumulator.

STORE        |    21    |          |  Store a word from the accumulator into a specific location in memory.

ADD          |    30    |          |  Add a word from a specific location in memory to the word in the
                                   |  accumulator (leave the result in the accumulator).

SUBTRACT     |    31    |          |  Subtract a word from a specific location in memory from the word in
                                   |  the accumulator (leave the result in the accumulator).

DIVIDE       |    32    |          |  Divide a word in the accumulator by a word from a specific location
                                   |  in memory (leave result in the accumulator).

MULTIPLY     |    33    |          |  Multiply a word from a specific location in memory by the word in
                                   |  the accumulator (leave result in the accumulator).

BRANCH       |    40    |          |  Branch to a specific location in memory.

BRANCHNEG    |    41    |          |  Branch to a specific location in memory if accumulator < 0

BRANCHZERO   |    42    |          |  Branch to a specific location in memory if accumulator == 0

HALT         |    43    |          |  Halt. The program has completed its task.